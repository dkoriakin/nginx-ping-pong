---
- hosts: localhost
  connection: local
  gather_facts: False
  vars_files:
    - vars.yml
  tasks:
    - name: make one instance
      ec2: image={{ image }}
           instance_type={{ instance_type }}
           aws_access_key={{ ec2_access_key }}
           aws_secret_key={{ ec2_secret_key }}
           keypair={{ keypair }}
           instance_tags='{ "Name":"{{ hostname }}" }'
           region={{ region }}
           group={{ group }}
           wait=true
      register: ec2

    - add_host: hostname={{ item.public_ip }} groupname=web     ansible_ssh_private_key_file=/home/dima/.ssh/dmitrykoriakin.pem
      with_items: "{{ ec2.instances }}"

    - name: wait for instances to listen on port:22
      wait_for:
        state=started
        host={{ item.public_dns_name }}
        port=22
      with_items: "{{ ec2.instances }}"

- hosts: web
  user: ec2-user
  become: yes
  gather_facts: True
  vars:
    connections : "4096"
  tasks:
    - name: "yum - install 'docker'"
      yum:
       name: "docker"
       update_cache: yes

    - name: create app.conf
      copy:
        src: "conf/app.conf"
        dest: "/home/ec2-user/app.conf"
    
    - name: create nginx_server.conf
      copy:
        src: "conf/nginx_server.conf"
        dest: "/etc/init/nginx_server.conf"

    - name: add index.html
      copy:
        src: "src/index.html"
        dest: "/home/ec2-user/index.html"

    - name: run docker
      shell: service docker start
      args:
        executable: /bin/bash
    
    - name: run nginx docker
      shell: docker run -d -t --name nginx --restart always -v /home/ec2-user/index.html:/usr/share/nginx/html/index.html -v /home/ec2-user/app.conf:/etc/nginx/conf.d/default.conf -p 80:80 nginx:latest
      args:
        executable: /bin/bash

- hosts: localhost
  connection: local
  gather_facts: False
  vars_files:
    - vars.yml
  tasks:
    - name: create ami
      ec2_ami:
        ec2_region: "{{region}}"
        ec2_access_key: "{{ec2_access_key}}"
        ec2_secret_key: "{{ec2_secret_key}}"
        instance_id: "{{ item.id }}"
        wait: yes
        name: "{{ ami_name }}"
      register: image  
      with_items: "{{ ec2.instances }}"

    - name: terminate one instance
      ec2:
        ec2_region: "{{region}}"
        ec2_access_key: "{{ec2_access_key}}"
        ec2_secret_key: "{{ec2_secret_key}}"
        instance_tags:
           name: "{{ hostname }}"
        instance_ids: "{{item.id}}"
        state: absent
        wait: True
      with_items: "{{ ec2.instances }}"


    - ec2_ami_find:
        ec2_region: "{{region}}"
        ec2_access_key: "{{ec2_access_key}}"
        ec2_secret_key: "{{ec2_secret_key}}"
        name:  "{{ ami_name }}"
        owner: self
        sort: name
        sort_order: descending
        sort_end: 1
      register: ami_find

    - name: setup a simple load balancer
      ec2_elb_lb:
        ec2_region: "{{region}}"
        ec2_access_key: "{{ec2_access_key}}"
        ec2_secret_key: "{{ec2_secret_key}}"
        name: lb1
        state: present
        region: "{{region}}"
        zones:
          - "{{ec2_availability_zone}}"
          - "{{ec2_availability_zone2}}"
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80
      register: awsblog-elb

    - name: create launch config
      ec2_lc:
        name: nginx_lc
        image_id: "{{ ami_find.results[0].ami_id }}"
        ec2_region: "{{region}}"
        ec2_access_key: "{{ec2_access_key}}"
        ec2_secret_key: "{{ec2_secret_key}}"
        key_name: "{{ keypair }}"
        region: "{{ region }}"
        security_groups: "{{ group }}"
        instance_type: "{{ instance_type }}"

    - ec2_asg:
        ec2_region: "{{region}}"
        ec2_access_key: "{{ec2_access_key}}"
        ec2_secret_key: "{{ec2_secret_key}}"
        name: nginx_sg
        availability_zones: "{{ec2_availability_zone}}"
        load_balancers: "lb1"
        vpc_zone_identifier: "{{subnet_id}}"
        launch_config_name: nginx_lc
        health_check_period: 60
        health_check_type: ELB
        replace_all_instances: yes
        min_size: 1
        max_size: 3
        desired_capacity: 3
        region: "{{ region }}"
...